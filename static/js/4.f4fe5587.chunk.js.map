{"version":3,"sources":["components/Diaologs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Diaologs/DialogItem/DialogItem.jsx","components/Diaologs/Message/Message.jsx","components/Diaologs/Dialogs.jsx","components/Diaologs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","type"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,qJCGhNC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAK,eAHX,GACXC,IAAML,WAWtC,OAFqCM,YAASX,EAATW,CAAqCL,K,kFCL/DM,EATI,SAACJ,GAChB,OACA,qBAAKK,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASP,GAAI,YAAcD,EAAMS,GAAjC,SAAsCT,EAAMU,UCKrCC,EAPC,SAACX,GACb,OACI,qBAAKK,UAAWC,IAAEM,QAAlB,SAA4BZ,EAAMY,W,yCCyCpCC,EAAcC,YAAiB,IAe/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAbL,SAAChB,GACpB,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAAUX,GACrBH,KAAK,iBAAiBe,YAAY,yBAEtC,8BAAK,kDAOFC,EAtDC,SAAC1B,GACb,IAAIP,EAAQO,EAAM2B,YAEdC,EAAkBnC,EAAMoC,QACvBC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMD,GAAIsB,EAAEtB,QAE3CuB,EAAmBvC,EAAMwC,SACxBH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAEdnB,EAAM0C,eAO3B,OAAKnC,EAAMN,OAEP,sBAAKW,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE8B,aAAlB,SAEKR,IAIL,qBAAKvB,UAAWC,IAAE2B,SAAlB,SAEI,8BAAMD,MAIV,cAACjB,EAAD,CAAqBG,SAnBT,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOF,sBAGH,cAAC,IAAD,CAAUlC,GAAI,Y,wBCF7BsC,sBACXpC,aAfkB,SAACV,GACnB,MAAO,CACJkC,YAAalC,EAAMkC,gBAGD,SAACa,GACtB,MAAO,CACHF,YAAa,SAACH,GACdK,EAAS,CAACC,KAAK,eAAgBN,eAAgBA,SAQnDvC,IAFW2C,CAGbb","file":"static/js/4.f4fe5587.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Gkyd\",\"dialogsItems\":\"Dialogs_dialogsItems__13Mn5\",\"active\":\"Dialogs_active__hwYsH\",\"messages\":\"Dialogs_messages__2r5Fk\",\"message\":\"Dialogs_message__1qtoq\",\"dialog\":\"Dialogs_dialog__2UzIU\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n    <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div> \r\n    ) \r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div> \r\n    )\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map( d => <DialogItem name={d.name} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages\r\n        .map( m => <Message message={m.message} />)\r\n\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n        \r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n                \r\n                \r\n            </div>\r\n            <div className={s.messages}>\r\n                \r\n                <div>{messagesElements}</div>\r\n                \r\n\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} \r\n                validate={[required, maxLength50]}\r\n                name='newMessageBody' placeholder='Enter your message'/>\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n       dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n        dispatch({type:'SEND_MESSAGE', newMessageBody: newMessageBody})\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}